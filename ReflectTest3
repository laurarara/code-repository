package test;
import java.lang.reflect.Method;

/**
 * @since 2020/1/21
 */
@Pro(className = "test.Person",methodName = "person")
public class ReflectTest3 {
    public static void main(String[] args) throws Exception {
        //提供一个模板（写一个框架类），可以创建任意类的对象，但是不能改变该类的对象的代码，但是不能改变框架的代码

        //1.解析注解：1.获取该类的字节码文件对象  2.获取注解
       Class<ReflectTest3> cls=ReflectTest3.class;
       Pro p= cls.getAnnotation(Pro.class);
       //2.调用注解对象中的属性（抽象方法），获得返回值
        String className=p.className();//获取了Pro注解的className属性的值，即"test.Person"
        String methodName=p.methodName();//获取了Pro注解的methodName属性的值，即"person"
        System.out.println(className);
        System.out.println(methodName);
        /**
         * 下面的步骤同配置文件应用反射的步骤，对获取到的类应用反射获取其方法
         * 好处:只需要改变该注解属性的值和就能获得不同类的不同方法
         */
        //3.加载该类进内存
        Class c=Class.forName(className);
        //4.创建对象
        Object obj= c.newInstance();
        //5.获取方法对象
        Method method=c.getMethod(methodName);
        //6.执行方法
        method.invoke(obj,null);
    }
}
