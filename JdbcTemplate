package JdbcTemplate;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import utils.DruidUtils;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

/**
 * 2020/2/7 JdbcTemplate对象的方法
 * 不需要close
 */
public class TemplateDemo {
    static JdbcTemplate template =new JdbcTemplate(DruidUtils.getDs());;
    public static void main(String[] args) {
        test3();
        System.out.println();
        test();
        test1();
        System.out.println();
        test2();
    }
    public static void test3(){
        //1.导入jar包as libraries  2.创建JdbcTemplate对象   3.调用方法
        String sql = "update account set money=1200 where id=?";
        int count = template.update(sql, 3);
        System.out.println(count);
//        //注意该方法结果集的长度只能是一条，将列名作为key,值作为value,封装为map集合
//        String sql2 = "select name,money from account where id=? or id=?";
//        Map<String, Object> stringObjectMap = template.queryForMap(sql2, 1, 2);
//        System.out.println(stringObjectMap);
        //普通的list查询一条记录，可以设置泛型将每一条记录放在一个map集合，然后把该集合放在list集合
        String sql3 = "select * from account";
        List<Map<String,Object>> list = template.queryForList(sql3);
        for (Map<String,Object> stringObjectMap1:list) {
            System.out.print(stringObjectMap1+" ");
        }
    }
    //没有简化，实现了RowMapper接口还是跟之前相同
    public static void test(){
        String sql4 = "select * from account";
        List<Account> list1 = template.query(sql4, new RowMapper<Account>() {
            @Override
            public Account mapRow(ResultSet resultSet, int i) throws SQLException {
                Account account=new Account();
                int id = resultSet.getInt(1);
                String name=resultSet.getString(2);
                int money = resultSet.getInt(3);
                account.setId(id);
                account.setName(name);
                account.setMoney(money);
                return account;
            }
        });
        for (Account account:list1) {
            System.out.print(account+"   ");
        }
        System.out.println();
    }
    //用BeanPropertyRowMapper对象，构造函数中加载类的字节码文件;可以实现到javaBean的自动封装
    public static void test1() {
        String sql4 = "select * from account";
        List<Account> list = template.query(sql4, new BeanPropertyRowMapper<Account>(Account.class));
        for (Account account:list) {
            System.out.print(account+"   ");
        }
    }

    public static void test2() {
        //返回查询记录总数；queryForObject用于聚合函数的查询
        String sql4 = "select count(money) from account";
        //返回的是long型
        Integer integer = template.queryForObject(sql4, Integer.class);
        System.out.println(integer);
        //返回记录Account对象的形式
        String sql5="select *from account where money=?";
        Account account=template.queryForObject(sql5,new BeanPropertyRowMapper<Account>(Account.class),1200);
        System.out.println(account.toString());
    }
}
