package Lesson2;
import java.util.ArrayList;
import java.util.Iterator;

interface Iterable<T> {
    Iterator<T> iterator();
}

//底层源码测试
public class SourceCodeTest <E>{
    public static void main(String[] args) {
        ArrayList aa=new ArrayList();
        ArrayList a=new ArrayList();
        a.add(1);
        a.add(3);
        a.add(5);
        a.add(6);
       // a.toString();
      //  System.out.println(a.iterator());


        ArrayList b=new ArrayList();
        b.add(2);
        b.add(3);
        b.add(6);
        b.add(7);
        //使用迭代器遍历ArrayList集合
        /**
         * 因为在你迭代之前，迭代器已经被通过list.itertor()创建出来了
         * 如果在迭代的过程中，又对list进行了改变其容器大小的操作，那么Java就会给出异常。
         * 因为此时Iterator对象已经无法主动同步list做出的改变，Java会认为你做出这样的操作是线程不安全的，
         * 就会给出善意的提醒（抛出ConcurrentModificationException异常）
         * Exception in thread "main" java.util.ConcurrentModificationException
         *在使用Iterator的时候禁止对所遍历的容器进行改变其大小结构的操作。
         * 例如: 在使用Iterator进行迭代时，如果对集合进行了add、remove操作就会出现ConcurrentModificationException异常。
         *
         */
        Iterator<Integer> list = b.iterator();
        while(list.hasNext()){
//            Object o=listIt.next();
//            if(o.equals(2)){
//                b.remove(o);
//            }
           System.out.print(list.next()+" ");// 2 3 6 7
        }
      //  System.out.println(b.toString());
        //a b的并集
        ArrayList c=new ArrayList(a);
        ArrayList d=new ArrayList(b);
//        c.addAll(d);//这样写更好
//        System.out.println(c);

        // a b的交集
        /**
         * 函数的具体用法
         *boolean retainAll(Collection<?> c)
         *  仅在列表中保留指定 collection 中所包含的元素
         */
//        c.retainAll(d);
//        System.out.println(c);

        //a b 的补集  a没有b有
//        d.removeAll(c);//2  7
//        System.out.println(d);
        //a b的差集 a有b没有
        /**
         * removeAll(Collection<?> c)
         * 批量删除元素
         */
//        c.removeAll(d); //1  5
//        System.out.println(c);

        /**
         * List<E> subList(int fromIndex, int toIndex)
         * 返回指定范围的子集合
         * 参数：
         * fromIndex 原集合的起始位置
         * toIndex 原集合的结束位置
         * 前闭后开的区间
         */
//        List e=c.subList(0,2);
//        System.out.println(e);
//        d.clear();//void clear() 删除元素:将原元素全部清除
//        System.out.println(d);
        c.iterator();
        System.out.println(c);//底层调用toString方法，打印形式为[ , , ,]


//       for(int i=0;i<c.size();i++){
//           System.out.print(c.get(i)+" ");
//       }
//        for(int i=0;i<d.size();i++){
//            System.out.print(d.get(i)+" ");
//        }
        
    }

//    public  void toString(ArrayList a){
//        for(int i=0;i<a.size();i++){
//            System.out.print(a.get(i)+" ");
//        }
//        System.out.println();
//    }


    //boolean addAll(Collection<? extends E> c) 批量插入集合元素



/**
 * boolean contains(Object o) (containsAll)
 * 查询集合中是否有指定的元素
 * 返回值：
 * false：表示指定元素在集合中不存在
 * true：表示指定元素在集合中存在
 */

/**
 * modCount从结构上修改此表的次数
 */

/**
 * toArray
 */

/**
 * int indexOf(Object o)
 * 返回指定的元素在集合中的位置
 * 返回值：表示元素在集合中的位置
 *   public int indexOf(Object o) {
 *         if (o == null) {
 *             for (int i = 0; i < size; i++)
 *                 if (elementData[i]==null)
 *                     return i;
 *         } else {
 *             for (int i = 0; i < size; i++)
 *                 if (o.equals(elementData[i]))
 *                     return i;
 *         }
 *         return -1;
 *     }
 */

/**
 * int lastIndexOf(Object o)
 * 最后出现指定元素的索引
 * 返回值：表示元素在集合中的位置
 *     public int lastIndexOf(Object o) {
 *         if (o == null) {
 *             for (int i = size-1; i >= 0; i--)
 *                 if (elementData[i]==null)
 *                     return i;
 *         } else {
 *             for (int i = size-1; i >= 0; i--)
 *                 if (o.equals(elementData[i]))
 *                     return i;
 *         }
 *         return -1;
 *     }
 */

/**
 * public Iterator<E>  iterator(Object o)
 * 返回以恰当顺序在此列表的元素上进行迭代的迭代器
 * 需要重写remove(int)方法
 */

/**
 * void removeRange(int fromIndex,int toIndex)
 * 返回指定的元素在集合中的位置
 * 返回值：表示元素在集合中的位置
 */



}
