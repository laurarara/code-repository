package Bank;
import java.util.Scanner;

public class Bank {
    Scanner in = new Scanner(System.in);
    int progressNum;//进程总数
    int sourceNum;//资源种类数
    int[] Ssum;
    int[][] Max;//最大需求矩阵
    int[][] Allocation;//分配矩阵
    int[][] Need;//需求矩阵
    int[] Available;//当前的可利用资源
    int[] Work;
    boolean[] Finish = new boolean[10];//判当前前资源是不是满足该进程的需求
    public Bank() {
        start();
    }
    public void start() {
        System.out.println("***********************************************************");
        System.out.println("                       欢迎使用银行家算法");
        System.out.println("                      17060208126       惠曼                               ");
        System.out.println("***********************************************************");
        System.out.println("请选择操作：\n\t1.开始使用\n\t2.退出");
        int a = in.nextInt();
        if (a == 1) {
            input();//进入输入算法
        } else {
            quit();
        }
    }
    public void input() {
        System.out.println("请输入进程个数：");
        this.progressNum = in.nextInt();
        System.out.println("请输入资源种类数:");
        this.sourceNum = in.nextInt();
        this.Ssum = getSsum();
        this.Max = getMax();
        this.Allocation = getAllocation();
        this.Need = getNeed();
        this.Available = getAvailable(progressNum, sourceNum);
        System.out.println("该时刻的资源分配表：");
        output();
        this.Check_Safe(Available);//检查可分配资源的安全性
        this.Ask_Distribution(false);
    }
    public int[] getSsum() {
        Ssum = new int[sourceNum];
        System.out.println("请输入各类资源总数:");
        for (int i = 0; i < sourceNum; i++) {
            Ssum[i] = in.nextInt();
        }
        return Ssum;
    }
    //最大需求矩阵
    public int[][] getMax() {
        Max = new int[progressNum][sourceNum];
        System.out.println("请输入最大需求矩阵:");
        for (int i = 0; i < progressNum; i++) {
            for (int j = 0; j < sourceNum; j++) {
                Max[i][j] = in.nextInt();
            }
        }
        return Max;
    }
    public int[][] getAllocation() {
        Allocation = new int[progressNum][sourceNum];
        System.out.println("请输入已分配资源情况矩阵");

        for (int i = 0; i < progressNum; i++) {

            for (int j = 0; j < sourceNum; j++) {
                Allocation[i][j] = in.nextInt();
            }
        }
        return Allocation;
    }

    /**
     * 需求的二维数组等于最大资源量二维数组-已经分配的资源的二维数组
     * @return
     */
    public int[][] getNeed() {
        Need = new int[progressNum][sourceNum];
        for (int i = 0; i < progressNum; i++) {
            for (int j = 0; j < sourceNum; j++) {
                Need[i][j] = Max[i][j] - Allocation[i][j];
            }

        }
        return Need;
    }

    /**
     * @param x//进程总数
     * @param y//资源总数
     * @return
     */
    public int[] getAvailable(int x, int y) {
        Available = new int[sourceNum];
        Available = Ssum;
        System.out.println("进程的可用资源Available为：");
        for (int j = 0; j < sourceNum; j++) {
            for (int i = 0; i < progressNum; i++) {
                Available[j] = Available[j] - Allocation[i][j];
                }
            System.out.print(Available[j] + " ");//当前进程的可利用资源
            }
        System.out.println("");
        return Available;
    }
    public void setFinish(int x) {
        for (int i = 0; i < progressNum; i++) {
            Finish[i] = false;
        }
    }

    /**
     * 将Available数组传进来
     * @param avail
     * @return
     */
    public boolean Check_Safe(int avail[]) {
        boolean boo = false;
        int k[] = new int[progressNum];//经进程总数存在k数组里
        int a = 0;
        Work = new int[sourceNum];//工作的数组等于资源数组
        for (int i = 0; i < avail.length; i++) {
            Work[i] = avail[i];
        }
        setFinish(progressNum);

        for (int s = 0; s < progressNum; s++) {
            for (int i = 0; i < progressNum; i++) {
                if (Finish[i] == false) {
                    for (int j = 0; j < sourceNum; j++) {
                        //判断下一个进程需要的资源数是否小于work数
                        if (Need[i][j] <= Work[j]) {
                            if (j + 1 == sourceNum) {
                                Finish[i] = true;
                                k[a] = i;
                                a++;
                                for (int m = 0; m < sourceNum; m++) {
                                    Work[m] = Work[m] + Allocation[i][m];
                                }

                            } else {
                                continue;
                            }

                        } else {
                          break;
                        }
                      }

                } else {
                    continue;
                }
            }
        }

        if (a == progressNum) {
            System.out.println("此刻系统处于安全状态，存在安全序列为：");
            for (int i = 0; i < progressNum; i++) {
                System.out.print("P" + k[i] + "\t");
            }
            System.out.println("");
            boo = true;
            } else {
            System.out.println("此时系统处于非安全状态");
            choice();
            boo = false;
            }

        return boo;
    }

    /**
     * 当某个进程再申请分配新的资源的方法
     * @param b
     */
    public void Ask_Distribution(boolean b) {
        int a = 0;
        int a0 = 0;
        int a1 = 0;
        boolean bo = false;

        for (int i = 0; i < sourceNum; i++) {
            Work[i] = Available[i];

        }
        System.out.println("请输入请求分配的进程编号：");
        int m = in.nextInt();
        System.out.println("请输入请求的各资源数");
        int dis[] = new int[sourceNum];
        for (int i = 0; i < sourceNum; i++) {
            dis[i] = in.nextInt();
        }
        for (int i = 0; i < sourceNum; i++) {
            if (dis[i] <= Need[m][i]) {
                a++;
                continue;

            } else {
                System.out.println("出错！！！请求资源数大于需求资源数!");
                choice();
                break;
            }
        }
        if (a == sourceNum) {
            for (int i = 0; i < sourceNum; i++) {
                if (dis[i] <= Work[i]) {
                    a0 = a0 + 1;
                    if (a0 == sourceNum) {
                        for (int j = 0; j < dis.length; j++) {
                            Work[j] = Work[j] - dis[j];
                            Allocation[m][j] = Allocation[m][j] + dis[j];
                            Need[m][j] = Need[m][j] - dis[j];
                        }
                        bo = Check_Safe(Work);
                    }
                    continue;
                } else {
                    System.out.println("出错！！！请求资源数大于可用资源数!");
                    choice();
                    break;
                }
            }
        }

        if (bo) {
            for (int i = 0; i < sourceNum; i++) {
                Available[i] = Available[i] - dis[i];

                if (Allocation[m][i] == Max[m][i]) {

                    a1 = a1 + 1;

                }

                while (a1 == sourceNum) {

                    System.out.println("(进程P" + m + "对资源的最大需求已满足，对其占有资源进行回收)");
                    for (int j = 0; j < sourceNum; j++) {
                        Available[j] = Available[j] + Allocation[m][j];

                    }
                    break;
                }
            }
            System.out.println("因此可以满足" + m + "进程的请求，分配后的各种变量值更新为:");
            output();
            choice();

        } else {
            for (int i = 0; i < dis.length; i++) {
                Work[i] = Work[i] + dis[i];
                Allocation[m][i] = Allocation[m][i] - dis[i];
                Need[m][i] = Need[m][i] + dis[i];
            }
        }
    }
    public void output() {
        System.out.println(" 进程     max\t\tallocation\t  need\t\tavailable");
//        System.out.print("P0  ");
//        for (int i = 0; i < typeNum; i++) {
//            System.out.print(Max[0][i] + "   ");
//        }
//        System.out.print("  ");
//        for (int i = 0; i < typeNum; i++) {
//            System.out.print(Allocation[0][i] + "   ");
//        }
//
//        System.out.print("  ");
//        for (int i = 0; i < typeNum; i++) {
//            System.out.print(Need[0][i] + "   ");
//            }
//        System.out.print("  ");
//        for (int i = 0; i < typeNum; i++) {
//            System.out.print(Available[i] + "   ");
//        }
//        System.out.println();
        for (int i = 0; i < progressNum; i++) {
            System.out.print("P" + i + "  ");
            for (int j = 0; j < sourceNum; j++) {
                System.out.print(Max[i][j] + "   ");
                }
            System.out.print("  ");
            for (int j = 0; j < sourceNum; j++) {
                System.out.print(Allocation[i][j] + "   ");
                }
            System.out.print("  ");

            for (int j = 0; j < sourceNum; j++) {
                System.out.print(Need[i][j] + "   ");
                }
            System.out.println();
            }
    }

    public void choice() {
        System.out.println("*****************************************");
        System.out.println("“Y”选择再次输入\n“N”返回银行家算法初始位置");
        System.out.println("****************************************");
        String str = in.next();
        if (str.equals("Y")) {
            Ask_Distribution(false);
            new Bank();
        }
    }
    public void quit() {
        System.out.println("您确定要退出吗?请选择“Y”/“N”");
        String a = in.next();
        if (a.equals("Y")) {
            System.out.println("**************感谢您的使用！**************");
        } else {

            start();

        }
    }
    public static void main(String[] args) {
        Bank yh = new Bank();
    }

}
