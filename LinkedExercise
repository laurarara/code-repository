//单链表查找倒数第k个节点
public class LinkedExercise<E> {
    Node<E> head;

    static class Node<E> {
        protected E data;
        public Node<E> next;

        public Node(E data, Node<E> next) {
            this.data = data;
            this.next = next;
        }
    }
//    //构造函数,第一个头结点有效，所以不需要构造函数
//    public FindLastK() {
//        this.head = new Node(new Object(),null);
//    }

    //找倒数第k个数的方法
    public E lastK(int k) {
        Node<E> cur1 = this.head.next;
        Node<E> cur2 = this.head;//cur2指向头
        if (head == null) {
            return null;
        } else if (k > getLenth() || k <= 0) {
            return null;
        }
        //如果找的倒数第k个恰好为链表长度，直接将头结点的数返回
        else if (k == getLenth()) {
            return head.data;
        }
        for (int i = 1; i <= k; i++) {
            cur2 = cur2.next;
            if (cur2 == null) {
                return null;
            }
        }
        //两个节点同时遍历，快节点遍历到最后一个节点时，慢节点指向的节点就是要找的节点
        while (cur2.next != null) {
            cur2 = cur2.next;
            cur1 = cur1.next;
        }
        return cur1.data;
    }

    //获取链表长度
    public int getLenth() {
        int length = 0;
        Node<E> cu = head;
        if (head == null) {
            return 0;
        }
        while (cu != null) {  //应该让cur去遍历，不能让head直接遍历，否则打印一次后show再次打印链表就会空
            length++;
            cu = cu.next;
        }
        return length;
    }
    //判断单链表是否有环

    /**
     * 快慢指针，先通过两个指针找到环内的节点，然后再一个节点从相交节点出发，
     * 另一个节点从头结点出发，再次相交的节点就是环的入口节点
     *
     * @return
     */
    public E getLinkCirclrVal() {
        Node<E> slow = this.head;
        Node<E> fast = this.head;
        //找到了相交节点
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                break;
            }
        }
        if (fast == null) {
            return null;
        } else {
            fast = this.head;
            while (fast != slow) {
                fast = fast.next;
                slow = slow.next;
            }
            return slow.data;
        }
    }


    //尾插法
    public void add(E val) {
        Node<E> newNode = new Node(val, null);
        Node<E> current = head;
        if (head == null) {
            head = newNode;
            return;
        }
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
        // newNode.next=null;
    }

    public void show() {
        Node<E> current = head;
        if (current == null) {
            System.out.println("链表空！！");
            return;
        }
        while (current != null && current.next != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println(current.data);
    }
    //构造带环的链表
    public void con(LinkedExercise<E> link){
        //将两个节点都指向头
        LinkedExercise.Node list=link.head;
        LinkedExercise.Node p=link.head;
        //list遍历到最后一个节点
        while (list.next!=null){
            list=list.next;
        }
        //让最后一个节点的写一个指向头结点的下一个 6指向5
        list.next=p.next.next;
    }
    public static void main(String[] args) {
        LinkedExercise<Integer> f = new LinkedExercise<>();
        f.add(3);
        f.add(4);
        f.add(5);
        f.add(6);
        f.show();
        System.out.println("该链表的长度：" + f.getLenth());

        System.out.println(f.lastK(1));//6
        System.out.println(f.lastK(4));//3
        System.out.println(f.lastK(5));//null

        f.con(f);
        System.out.println("环的入口节点："+f.getLinkCirclrVal());

    }
}
