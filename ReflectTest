import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

/**
 * 2020/2/20改进
 */
public class TestCase01 {
    private int ma = 10;
    private TestCase01() {
        System.out.println("构造函数");
    }
    private TestCase01(int m) {
        this.ma=m;
        System.out.println(ma);
    }
}

 class TestCase02 {
    private int mam = 10;
    public TestCase02() {
        System.out.println("构造函数2");
    }
    private void show() {
        System.out.println("mam:" + mam);
    }
     private void show(String b) {
         System.out.println("mam:" + mam+" b:"+b);
     }
}

class Test {
    public static void main(String[] args) throws Exception {
            Class c=Class.forName("TestCase01");
            //1.调用无参的构造函数
            Constructor con=c.getDeclaredConstructor();
            con.setAccessible(true);
            con.newInstance();//创建对象10
            //2.调用有参的构造函数
            Constructor con2=c.getDeclaredConstructor(int.class);
            con2.setAccessible(true);
            con2.newInstance(40);//创建对象

            //当构造函数不private时，new对象反射私有成员变量和私有方法
            TestCase02 t2=new TestCase02();
            Class c2=t2.getClass();
            /**
             * 1.先获取私有方法
             * getDeclaredMethod("show", null); 方法名"show",参数列表show
             * invoke(t2, null);对象t2,参数方法
             */
            Method m = c2.getDeclaredMethod("show", null);
            m.setAccessible(true);
            m.invoke(t2, null);
            //获取带参数的私有方法
            Method m2 = c2.getDeclaredMethod("show", String.class);
            m2.setAccessible(true);
            m2.invoke(t2, "6");//mam:10 b:6
            /**
             * 2.设置私有成员变量的值
             * f1.set(t2, 20);//设置t2对象私有成员变量的值为20
             */
            Field f1 = c2.getDeclaredField("mam");
            f1.setAccessible(true);
            System.out.println("打印当前属性的值："+f1.get(t2));
            f1.set(t2, 20);
            //3.再次打印该方法，得到获取后的值
            Method m3 = c2.getDeclaredMethod("show", null);
            m3.setAccessible(true);
            m3.invoke(t2, null);
        }
    }



