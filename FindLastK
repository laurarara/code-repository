//单链表查找倒数第k个节点
 class FindLastK<E> {
    Node<E> head;

    class Node<E> {
        protected E data;
        protected Node<E> next;

        public Node(E data,Node<E> next) {
            this.data = data;
            this.next=next;
        }
    }
//    //构造函数,第一个头结点有效，所以不需要构造函数
//    public FindLastK() {
//        this.head = new Node(new Object(),null);
//    }

    //找倒数第k个数的方法
    public E lastK(int k){
        Node<E> cur1=this.head.next;
        Node<E> cur2=this.head;//cur2指向头
        if(head==null){
            return null;
        }

        if(k>getLenth()||k<=0){
            return null;
        }
        else if(k==getLenth()){
            return head.data;
        }
        for(int i=1;i<=k;i++) {
            cur2=cur2.next;
            if(cur2==null){
                return null;
            }
        }
        while (cur2.next!=null){
            cur2=cur2.next;
            cur1=cur1.next;
        }
        return cur1.data;
    }
    //获取链表长度
    public int getLenth(){
        int length=0;
        Node<E> cu=head;
        if(head==null){
            return 0;
        }
        while (cu!=null){  //应该让cur去遍历，不能让head直接遍历，否则打印一次后show再次打印链表就会空
            length++;
            cu=cu.next;
        }
        return length;
    }

    //尾插法
    public void add(E val) {
        Node<E> newNode = new Node(val,null);
        Node<E> current = head;
        if(head==null){
            head=newNode;
            return;
        }
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
       // newNode.next=null;
    }

    public void show() {
        Node<E> current = head;
        if(current==null){
            System.out.println("链表空！！");
            return;
        }
        while (current!=null&&current.next!= null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println(current.data);
    }

    }

public class FindLastKTest{
    public static void main(String[] args) {
        FindLastK<Integer> f=new FindLastK<>();
        f.add(3);
        f.add(4);
        f.add(5);
        f.add(6);
        f.show();
        System.out.println("该链表的长度："+f.getLenth());

        System.out.println(f.lastK(1));//6
        System.out.println(f.lastK(4));//3
        System.out.println(f.lastK(5));//null
        f.show();

        }
    }
